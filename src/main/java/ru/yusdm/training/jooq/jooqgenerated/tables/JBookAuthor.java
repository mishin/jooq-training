/*
 * This file is generated by jOOQ.
 */
package ru.yusdm.training.jooq.jooqgenerated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.yusdm.training.jooq.jooqgenerated.Indexes;
import ru.yusdm.training.jooq.jooqgenerated.JPublic;
import ru.yusdm.training.jooq.jooqgenerated.Keys;
import ru.yusdm.training.jooq.jooqgenerated.tables.records.JBookAuthorRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JBookAuthor extends TableImpl<JBookAuthorRecord> {

    private static final long serialVersionUID = -1166969809;

    /**
     * The reference instance of <code>PUBLIC.BOOK_AUTHOR</code>
     */
    public static final JBookAuthor BOOK_AUTHOR = new JBookAuthor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JBookAuthorRecord> getRecordType() {
        return JBookAuthorRecord.class;
    }

    /**
     * The column <code>PUBLIC.BOOK_AUTHOR.AUTHOR_ID</code>.
     */
    public final TableField<JBookAuthorRecord, Long> AUTHOR_ID = createField("AUTHOR_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.BOOK_AUTHOR.BOOK_ID</code>.
     */
    public final TableField<JBookAuthorRecord, Long> BOOK_ID = createField("BOOK_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.BOOK_AUTHOR</code> table reference
     */
    public JBookAuthor() {
        this(DSL.name("BOOK_AUTHOR"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.BOOK_AUTHOR</code> table reference
     */
    public JBookAuthor(String alias) {
        this(DSL.name(alias), BOOK_AUTHOR);
    }

    /**
     * Create an aliased <code>PUBLIC.BOOK_AUTHOR</code> table reference
     */
    public JBookAuthor(Name alias) {
        this(alias, BOOK_AUTHOR);
    }

    private JBookAuthor(Name alias, Table<JBookAuthorRecord> aliased) {
        this(alias, aliased, null);
    }

    private JBookAuthor(Name alias, Table<JBookAuthorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> JBookAuthor(Table<O> child, ForeignKey<O, JBookAuthorRecord> key) {
        super(child, key, BOOK_AUTHOR);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return JPublic.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FK_AUTHOR_ID_INDEX_A, Indexes.FK_BOOK_ID_INDEX_A, Indexes.PRIMARY_KEY_A);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<JBookAuthorRecord> getPrimaryKey() {
        return Keys.PK_BOOK_AUTHOR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<JBookAuthorRecord>> getKeys() {
        return Arrays.<UniqueKey<JBookAuthorRecord>>asList(Keys.PK_BOOK_AUTHOR);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<JBookAuthorRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<JBookAuthorRecord, ?>>asList(Keys.FK_AUTHOR_ID, Keys.FK_BOOK_ID);
    }

    public JAuthor author() {
        return new JAuthor(this, Keys.FK_AUTHOR_ID);
    }

    public JBook book() {
        return new JBook(this, Keys.FK_BOOK_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JBookAuthor as(String alias) {
        return new JBookAuthor(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JBookAuthor as(Name alias) {
        return new JBookAuthor(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JBookAuthor rename(String name) {
        return new JBookAuthor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JBookAuthor rename(Name name) {
        return new JBookAuthor(name, null);
    }
}
