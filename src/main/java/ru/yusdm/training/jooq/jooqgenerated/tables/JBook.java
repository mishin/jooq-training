/*
 * This file is generated by jOOQ.
 */
package ru.yusdm.training.jooq.jooqgenerated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.DateAsTimestampBinding;
import org.jooq.impl.TableImpl;

import ru.yusdm.training.jooq.jooqgenerated.Indexes;
import ru.yusdm.training.jooq.jooqgenerated.JPublic;
import ru.yusdm.training.jooq.jooqgenerated.Keys;
import ru.yusdm.training.jooq.jooqgenerated.tables.records.JBookRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JBook extends TableImpl<JBookRecord> {

    private static final long serialVersionUID = 1320833388;

    /**
     * The reference instance of <code>PUBLIC.BOOK</code>
     */
    public static final JBook BOOK = new JBook();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JBookRecord> getRecordType() {
        return JBookRecord.class;
    }

    /**
     * The column <code>PUBLIC.BOOK.ID</code>.
     */
    public final TableField<JBookRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.BOOK.NAME</code>.
     */
    public final TableField<JBookRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR(400).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.BOOK.CONTENT_AS_TEXT</code>.
     */
    public final TableField<JBookRecord, String> CONTENT_AS_TEXT = createField("CONTENT_AS_TEXT", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>PUBLIC.BOOK.CONTENT_AS_PDF</code>.
     */
    public final TableField<JBookRecord, byte[]> CONTENT_AS_PDF = createField("CONTENT_AS_PDF", org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>PUBLIC.BOOK.PAGES_NUMBER</code>.
     */
    public final TableField<JBookRecord, Integer> PAGES_NUMBER = createField("PAGES_NUMBER", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>PUBLIC.BOOK.PUBLISH_DATE</code>.
     */
    public final TableField<JBookRecord, Timestamp> PUBLISH_DATE = createField("PUBLISH_DATE", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new DateAsTimestampBinding());

    /**
     * Create a <code>PUBLIC.BOOK</code> table reference
     */
    public JBook() {
        this(DSL.name("BOOK"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.BOOK</code> table reference
     */
    public JBook(String alias) {
        this(DSL.name(alias), BOOK);
    }

    /**
     * Create an aliased <code>PUBLIC.BOOK</code> table reference
     */
    public JBook(Name alias) {
        this(alias, BOOK);
    }

    private JBook(Name alias, Table<JBookRecord> aliased) {
        this(alias, aliased, null);
    }

    private JBook(Name alias, Table<JBookRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> JBook(Table<O> child, ForeignKey<O, JBookRecord> key) {
        super(child, key, BOOK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return JPublic.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<JBookRecord, Long> getIdentity() {
        return Keys.IDENTITY_BOOK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<JBookRecord> getPrimaryKey() {
        return Keys.PK_BOOK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<JBookRecord>> getKeys() {
        return Arrays.<UniqueKey<JBookRecord>>asList(Keys.PK_BOOK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JBook as(String alias) {
        return new JBook(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JBook as(Name alias) {
        return new JBook(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JBook rename(String name) {
        return new JBook(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JBook rename(Name name) {
        return new JBook(name, null);
    }
}
